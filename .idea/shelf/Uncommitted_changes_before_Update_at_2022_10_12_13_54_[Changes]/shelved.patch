Index: configen/configen.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package configen\r\n\r\nimport (\r\n\t\"CodeGenerationGo/template\"\r\n\t\"CodeGenerationGo/util\"\r\n\t\"bufio\"\r\n\t\"fmt\"\r\n\t\"gopkg.in/yaml.v3\"\r\n\tv1 \"k8s.io/api/core/v1\"\r\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\r\n\t\"log\"\r\n\t\"os\"\r\n\t\"regexp\"\r\n\t\"strconv\"\r\n)\r\n\r\n// 将输入的语句转变成MatchRes格式\r\n// 一条输入语句转换成一个MatchRes\r\nfunc ParseStatement(statement string) template.MatchRes {\r\n\t//statement example:  required: app:appA & app:appB\r\n\t//result[0] : required: app:appA\r\n\t//Parse the regular expression and return the interpreter if successful\r\n\t//reg1 parses the whole statement\r\n\t//reg2 parses the sub\r\n\treg1 := regexp.MustCompile(`(required|preferred):(\\d*)\\s(\\w+):(\\w+)\\s(&|\\^)\\s(.+)`)\r\n\treg2 := regexp.MustCompile(`(\\w+):(\\w+)`)\r\n\tif reg1 == nil || reg2 == nil {\r\n\t\tfmt.Println(\"syntax err\")\r\n\t}\r\n\r\n\tresult1 := reg1.FindAllStringSubmatch(statement, -1)\r\n\tresult2 := reg2.FindAllStringSubmatch(result1[0][6], -1)\r\n\r\n\tvar matchRes template.MatchRes\r\n\r\n\tmatchRes.Trendrule = result1[0][1]\r\n\tmatchRes.Key = result1[0][3]\r\n\tmatchRes.Value = result1[0][4]\r\n\tmatchRes.Relationship = util.Relation2Opera(result1[0][5])\r\n\r\n\tif matchRes.Trendrule == \"required\" {\r\n\t\tmatchRes.Weight = -1\r\n\r\n\t} else if matchRes.Trendrule == \"preferred\" {\r\n\t\tmatchRes.Weight, _ = strconv.Atoi(result1[0][2]) //字符串转换为数字\r\n\t} else {\r\n\t\tfmt.Println(\"relationship word srr\")\r\n\t}\r\n\r\n\tmatches := make([]metav1.LabelSelectorRequirement, 0)\r\n\tfor _, element := range result2 {\r\n\t\tvar match metav1.LabelSelectorRequirement\r\n\t\tmatch.Key = element[1]\r\n\t\tmatch.Values = append(match.Values, element[2])\r\n\t\tmatch.Operator = matchRes.Relationship\r\n\r\n\t\tmatches = append(matches, match)\r\n\r\n\t}\r\n\tmatchRes.MatchExpressions = matches\r\n\r\n\treturn matchRes\r\n}\r\n\r\n// 初始化affinity\r\nfunc AffinityInit() v1.Affinity {\r\n\taffinity := v1.Affinity{}\r\n\r\n\treturn affinity\r\n}\r\n\r\nfunc InsertMatchRes2Affinity(affinity v1.Affinity, matchRes template.MatchRes) v1.Affinity {\r\n\tvar labelSelector metav1.LabelSelector\r\n\tlabelSelector.MatchExpressions = matchRes.MatchExpressions\r\n\r\n\tif matchRes.Trendrule == \"preferred\" {\r\n\t\t//TODO\r\n\t\t//var preference template.Perference\r\n\t\t//preference.Weight = matchRes.Weight\r\n\t\t//preference.PodAffinityTerm.LabelSelector = append(\r\n\t\t//\tpreference.PodAffinityTerm.LabelSelector, labelSelector)\r\n\t\t//affinity.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution.Preference = append(\r\n\t\t//\taffinity.PodAffinity.PreferredDuringSchedulingIgnoredDuringExecution.Preference, preference)\r\n\t}\r\n\r\n\tif matchRes.Trendrule == \"required\" {\r\n\t\taffinity.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution = append(\r\n\t\t\taffinity.PodAffinity.RequiredDuringSchedulingIgnoredDuringExecution.LabelSelector, labelSelector)\r\n\t}\r\n\r\n\treturn affinity\r\n}\r\n\r\nfunc InsertAffinity2Yaml(affinity v1.Affinity, sourcePath string, outPath string) {\r\n\tconfig, _ := util.ReadConfigYaml(sourcePath)\r\n\tconfig.Spec.Affinity = affinity\r\n\tyamlByte, _ := yaml.Marshal(config)\r\n\r\n\tif err := os.WriteFile(outPath, yamlByte, 0666); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n}\r\n\r\nfunc YamlGen(states []string, sourcePath string, outPath string) {\r\n\taffinity := AffinityInit()\r\n\tfor _, state := range states {\r\n\t\tmatch := ParseStatement(state)\r\n\t\taffinity = InsertMatchRes2Affinity(affinity, match)\r\n\t}\r\n\tInsertAffinity2Yaml(affinity, sourcePath, outPath)\r\n\r\n}\r\nfunc YamlGenbyTxt(statesfile string, sourcePath string, outPath string) {\r\n\tvar statements []string\r\n\tfile, err := os.Open(statesfile)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tdefer file.Close()\r\n\r\n\tscanner := bufio.NewScanner(file)\r\n\tfor scanner.Scan() {\r\n\t\tstatements = append(statements, scanner.Text())\r\n\t}\r\n\r\n\tif err := scanner.Err(); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tYamlGen(statements, sourcePath, outPath)\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/configen/configen.go b/configen/configen.go
--- a/configen/configen.go	(revision f3ce302589dadcb5649248ff9ba4524f75ab9d40)
+++ b/configen/configen.go	(date 1665218259696)
@@ -14,6 +14,10 @@
 	"strconv"
 )
 
+func add() {
+	fmt.Println("111")
+}
+
 // 将输入的语句转变成MatchRes格式
 // 一条输入语句转换成一个MatchRes
 func ParseStatement(statement string) template.MatchRes {
